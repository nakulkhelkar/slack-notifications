https://api.slack.com/apps
create slack appsthen select workgroup
then select incoming webhooks -- https://www.youtube.com/watch?v=PsIwZmrUxYM

webhook url - https://hooks.slack.com/services/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

permission-AWSLambdaExecute
CloudWatchFullAccess	

AmazonS3FullAccess	

AWSLambdaBasicExecutionRole

code to test lambda and slack integration--
import json
import urllib3

def lambda_handler(event, context):
    http=urllib3.PoolManager()
    data= {"text": "hi from nakul"}
    r = http.request("POST", "https://hooks.slack.com/services/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", body =json.dumps(data),
                     headers= {"Content-Type": "application/json"})
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }


---------------------------
import json
import urllib3

def lambda_handler(event, context):
    http = urllib3.PoolManager()
    
    if "Records" in event:
        # File was uploaded to S3 bucket
        bucketname = event["Records"][0]["s3"]["bucket"]["name"]
        filename = event["Records"][0]["s3"]["object"]["key"]
        message = f"File '{filename}' uploaded to S3 bucket '{bucketname}'"
    else:
        # No file uploaded event
        message = "No file uploaded to S3"
    
    data = {"text": message}
    
    r = http.request(
        "POST",
        "https://hooks.slack.com/services/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",
        body=json.dumps(data),
        headers={"Content-Type": "application/json"}
    )
    
    if r.status == 200:
        print("Slack message sent successfully")
    else:
        print(f"Failed to send Slack message: {r.status}")
    
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
-------------------------------
import json
import urllib3
import boto3
from datetime import datetime, timedelta, timezone

# Slack webhook URL
slack_webhook_url = "https://hooks.slack.com/services/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"

def lambda_handler(event, context):
    http = urllib3.PoolManager()
    s3 = boto3.client("s3")
    current_time = datetime.now(timezone.utc)
    file_uploaded = False

    # Check if a file was uploaded in the last 5 minutes
    objects = s3.list_objects_v2(Bucket="mydumpydata")["Contents"]
    for obj in objects:
        last_modified = obj["LastModified"].replace(tzinfo=timezone.utc).astimezone(timezone.utc)
        if current_time - last_modified < timedelta(minutes=5):
            # File uploaded within the last 5 minutes
            file_uploaded = True
            break
    
    if file_uploaded:
        message = "File uploaded in the last 5 minutes"
    else:
        message = "No file uploaded in the last 5 minutes"
    
    data = {"text": message}
    
    r = http.request(
        "POST",
        slack_webhook_url,
        body=json.dumps(data),
        headers={"Content-Type": "application/json"}
    )
    
    if r.status == 200:
        print("Slack message sent successfully")
    else:
        print(f"Failed to send Slack message: {r.status}")
    
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
----------------------

---------------------------
import json
import urllib3
import boto3
from datetime import datetime

# Slack webhook URL
slack_webhook_url = "https://hooks.slack.com/services/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"
# S3 bucket name
bucket_name = "mydumpydata"

def lambda_handler(event, context):
    http = urllib3.PoolManager()
    s3 = boto3.client("s3")
    current_date = datetime.now().strftime("%Y%m%d")
    folder_name = current_date + "/"

    try:
        s3.head_object(Bucket=bucket_name, Key=folder_name)
        message = f"Folder {folder_name} exists in the S3 bucket."
    except s3.exceptions.ClientError as e:
        if e.response["Error"]["Code"] == "404":
            message = f"Folder {folder_name} does not exist in the S3 bucket."
        else:
            message = f"Error checking folder in S3 bucket: {str(e)}"

    data = {"text": message}

    r = http.request(
        "POST",
        slack_webhook_url,
        body=json.dumps(data),
        headers={"Content-Type": "application/json"}
    )

    if r.status == 200:
        print("Slack message sent successfully")
    else:
        print(f"Failed to send Slack message: {r.status}")

    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
-------------------------
check current folder file count
---------------------------
import json
import urllib3
import boto3
from datetime import datetime

# Slack webhook URL
slack_webhook_url = "https://hooks.slack.com/services/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"
# S3 bucket name
bucket_name = "mydumpydata"

def lambda_handler(event, context):
    http = urllib3.PoolManager()
    s3 = boto3.client("s3")
    current_date = datetime.now().strftime("%Y%m%d")
    folder_name = current_date + "/"
    message = ""

    try:
        response = s3.list_objects_v2(Bucket=bucket_name, Prefix=folder_name)
        if 'Contents' in response:
            # Exclude the folder itself from the count
            num_files = len(response['Contents']) - 1
            if num_files == 0:
                message = f"Folder {folder_name} exists in the S3 bucket, but it is empty."
            else:
                message = f"Folder {folder_name} exists in the S3 bucket and contains {num_files} file(s)."
        else:
            message = f"Folder {folder_name} exists in the S3 bucket, but it is empty."
    except s3.exceptions.ClientError as e:
        if e.response["Error"]["Code"] == "NoSuchBucket":
            message = f"Bucket {bucket_name} does not exist."
        else:
            message = f"Error checking folder in S3 bucket: {str(e)}"

    data = {"text": message}

    r = http.request(
        "POST",
        slack_webhook_url,
        body=json.dumps(data),
        headers={"Content-Type": "application/json"}
    )

    if r.status == 200:
        print("Slack message sent successfully")
    else:
        print(f"Failed to send Slack message: {r.status}")

    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }

---------------------------
import json
import urllib3
import boto3
from datetime import datetime

# Slack webhook URL
slack_webhook_url = "https://hooks.slack.com/services/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"
# S3 bucket name
bucket_name = "mydumpydata"

def lambda_handler(event, context):
    http = urllib3.PoolManager()
    s3 = boto3.client("s3")
    current_date = datetime.now().strftime("%Y%m%d")
    folder_name = current_date + "/"
    message = ""

    try:
        s3.head_object(Bucket=bucket_name, Key=folder_name)
        message = f"Folder {folder_name} exists in the S3 bucket."
        response = s3.list_objects_v2(Bucket=bucket_name, Prefix=folder_name)
        if 'Contents' in response:
            num_files = len(response['Contents']) - 1
            if num_files == 0:
                message += " The folder is empty."
            else:
                message += f" The folder contains {num_files} file(s)."
        else:
            message += " The folder is empty."
    except s3.exceptions.ClientError as e:
        if e.response["Error"]["Code"] == "NoSuchKey":
            message = f"Folder {folder_name} does not exist in the S3 bucket."
        elif e.response["Error"]["Code"] == "NoSuchBucket":
            message = f"Bucket {bucket_name} does not exist."
        else:
            message = f"Error checking folder in S3 bucket: {str(e)}"

    data = {"text": message}

    r = http.request(
        "POST",
        slack_webhook_url,
        body=json.dumps(data),
        headers={"Content-Type": "application/json"}
    )

    if r.status == 200:
        print("Slack message sent successfully")
    else:
        print(f"Failed to send Slack message: {r.status}")

    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }

------------------------------

20230516/
